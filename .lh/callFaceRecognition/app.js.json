{
    "sourceFile": "callFaceRecognition/app.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1686127832637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686127938545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,28 +10,35 @@\n exports.handler = async (event) => {\r\n   return await callFaceRecognition(event)\r\n }\r\n \r\n-const getUploadURL = async function(event) {\r\n-  const randomID = parseInt(Math.random() * 10000000)\r\n-  const Key = `${randomID}.jpg`\r\n+const callFaceRecognition = async function(event) {\r\n+  try {\r\n+    // Initialize the Amazon Rekognition client\r\n+    const rekognition = new AWS.Rekognition();\r\n \r\n-  // Get signed URL from S3\r\n-  const s3Params = {\r\n-    Bucket: process.env.UploadBucket,\r\n-    Key,\r\n-    Expires: URL_EXPIRATION_SECONDS,\r\n-    ContentType: 'image/jpeg',\r\n+    // Specify the S3 bucket and image for face detection\r\n+    const s3_bucket = event.Records[0].s3.bucket.name;\r\n+    const image_name = event.Records[0].s3.object.key;\r\n \r\n-    // This ACL makes the uploaded object publicly readable. You must also uncomment\r\n-    // the extra permission for the Lambda function in the SAM template.\r\n-    // ACL: 'public-read'\r\n+    // Perform face detection\r\n+    const response = await rekognition.detectFaces({\r\n+      Image: {\r\n+        S3Object: {\r\n+          Bucket: s3_bucket,\r\n+          Name: image_name\r\n+        }\r\n+      },\r\n+      Attributes: ['ALL']\r\n+    }).promise();\r\n+\r\n+    console.log('FaceDetails: ', response.FaceDetails);\r\n+    // Process the response and extract face details\r\n+    // (bounding box, age, gender, emotions, etc.)\r\n+    // Return the detected face details as the Lambda function output\r\n+    return response.FaceDetails;\r\n+  } catch (error) {\r\n+    // Handle any errors and log them\r\n+    console.error(error);\r\n+    throw error;\r\n   }\r\n-\r\n-  console.log('Params: ', s3Params)\r\n-  const uploadURL = await s3.getSignedUrlPromise('putObject', s3Params)\r\n-\r\n-  return JSON.stringify({\r\n-    uploadURL: uploadURL,\r\n-    Key\r\n-  })\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686144697523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,22 +16,29 @@\n     // Initialize the Amazon Rekognition client\r\n     const rekognition = new AWS.Rekognition();\r\n \r\n     // Specify the S3 bucket and image for face detection\r\n-    const s3_bucket = event.Records[0].s3.bucket.name;\r\n-    const image_name = event.Records[0].s3.object.key;\r\n+    const blobImage = event.body;\r\n \r\n     // Perform face detection\r\n     const response = await rekognition.detectFaces({\r\n       Image: {\r\n-        S3Object: {\r\n-          Bucket: s3_bucket,\r\n-          Name: image_name\r\n-        }\r\n+        \"Bytes\": blobImage\r\n       },\r\n       Attributes: ['ALL']\r\n     }).promise();\r\n \r\n+      // // Perform face detection\r\n+      // const response = await rekognition.detectFaces({\r\n+      //   Image: {\r\n+      //     S3Object: {\r\n+      //       Bucket: s3_bucket,\r\n+      //       Name: image_name\r\n+      //     }\r\n+      //   },\r\n+      //   Attributes: ['ALL']\r\n+      // }).promise();\r\n+\r\n     console.log('FaceDetails: ', response.FaceDetails);\r\n     // Process the response and extract face details\r\n     // (bounding box, age, gender, emotions, etc.)\r\n     // Return the detected face details as the Lambda function output\r\n"
                },
                {
                    "date": 1686174111641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,20 @@\n const callFaceRecognition = async function(event) {\r\n   try {\r\n     // Initialize the Amazon Rekognition client\r\n     const rekognition = new AWS.Rekognition();\r\n+    \r\n+    const body = event.body;\r\n \r\n+  // Transform the blob to bytes\r\n+    const bytes = Buffer.from(body, 'base64');\r\n+\r\n     // Specify the S3 bucket and image for face detection\r\n-    const blobImage = event.body;\r\n \r\n     // Perform face detection\r\n     const response = await rekognition.detectFaces({\r\n       Image: {\r\n-        \"Bytes\": blobImage\r\n+        \"Bytes\": bytes\r\n       },\r\n       Attributes: ['ALL']\r\n     }).promise();\r\n \r\n@@ -37,13 +41,12 @@\n       //   },\r\n       //   Attributes: ['ALL']\r\n       // }).promise();\r\n \r\n-    console.log('FaceDetails: ', response.FaceDetails);\r\n-    // Process the response and extract face details\r\n-    // (bounding box, age, gender, emotions, etc.)\r\n-    // Return the detected face details as the Lambda function output\r\n-    return response.FaceDetails;\r\n+    console.log('FaceDetails: ', response.FaceDetails.smile);\r\n+\r\n+    return JSON.stringify(response.FaceDetails)\r\n+\r\n   } catch (error) {\r\n     // Handle any errors and log them\r\n     console.error(error);\r\n     throw error;\r\n"
                },
                {
                    "date": 1686174136842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,33 +16,19 @@\n     // Initialize the Amazon Rekognition client\r\n     const rekognition = new AWS.Rekognition();\r\n     \r\n     const body = event.body;\r\n-\r\n-  // Transform the blob to bytes\r\n+    // Transform the blob to bytes\r\n     const bytes = Buffer.from(body, 'base64');\r\n \r\n-    // Specify the S3 bucket and image for face detection\r\n-\r\n     // Perform face detection\r\n     const response = await rekognition.detectFaces({\r\n       Image: {\r\n         \"Bytes\": bytes\r\n       },\r\n       Attributes: ['ALL']\r\n     }).promise();\r\n \r\n-      // // Perform face detection\r\n-      // const response = await rekognition.detectFaces({\r\n-      //   Image: {\r\n-      //     S3Object: {\r\n-      //       Bucket: s3_bucket,\r\n-      //       Name: image_name\r\n-      //     }\r\n-      //   },\r\n-      //   Attributes: ['ALL']\r\n-      // }).promise();\r\n-\r\n     console.log('FaceDetails: ', response.FaceDetails.smile);\r\n \r\n     return JSON.stringify(response.FaceDetails)\r\n \r\n"
                },
                {
                    "date": 1686174524013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         \"Bytes\": bytes\r\n       },\r\n       Attributes: ['ALL']\r\n     }).promise();\r\n-\r\n+    // DEFAULT | ALL | AGE_RANGE | BEARD | EMOTIONS | EYE_DIRECTION | EYEGLASSES | EYES_OPEN | GENDER | MOUTH_OPEN | MUSTACHE | FACE_OCCLUDED | SMILE | SUNGLASSES\r\n     console.log('FaceDetails: ', response.FaceDetails.smile);\r\n \r\n     return JSON.stringify(response.FaceDetails)\r\n \r\n"
                }
            ],
            "date": 1686127832637,
            "name": "Commit-0",
            "content": "'use strict'\r\n\r\nconst AWS = require('aws-sdk')\r\nAWS.config.update({ region: process.env.AWS_REGION })\r\n\r\n// Change this value to adjust the signed URL's expiration\r\nconst URL_EXPIRATION_SECONDS = 300\r\n\r\n// Main Lambda entry point\r\nexports.handler = async (event) => {\r\n  return await callFaceRecognition(event)\r\n}\r\n\r\nconst getUploadURL = async function(event) {\r\n  const randomID = parseInt(Math.random() * 10000000)\r\n  const Key = `${randomID}.jpg`\r\n\r\n  // Get signed URL from S3\r\n  const s3Params = {\r\n    Bucket: process.env.UploadBucket,\r\n    Key,\r\n    Expires: URL_EXPIRATION_SECONDS,\r\n    ContentType: 'image/jpeg',\r\n\r\n    // This ACL makes the uploaded object publicly readable. You must also uncomment\r\n    // the extra permission for the Lambda function in the SAM template.\r\n    // ACL: 'public-read'\r\n  }\r\n\r\n  console.log('Params: ', s3Params)\r\n  const uploadURL = await s3.getSignedUrlPromise('putObject', s3Params)\r\n\r\n  return JSON.stringify({\r\n    uploadURL: uploadURL,\r\n    Key\r\n  })\r\n}"
        }
    ]
}